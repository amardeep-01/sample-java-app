
name: ACHIEVE-Service-CICD

on:
  push:
    branches:
      - '**'
    tags:  
      - 'dev_v*' 
      - 'uat_v*'   
      - 'qa_v*'
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Select Environment
        options:
          - DEV
          - QA
          - UAT

jobs:
  build-and-test:
    if: github.event_name != 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/')
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build with Maven
        run: mvn clean package
      
  deploymentjob:
     name: Deployment Job
     if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
     runs-on: self-hosted
     steps:
       - name: Checkout Repository
         uses: actions/checkout@v2
        
       - name: Determine Environment
         id: env
         if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
         run: |
          Write-Output "Event Name: $env:GITHUB_EVENT_NAME"
          Write-Output "Ref: $env:GITHUB_REF"
          if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch') {
            Write-Output "::set-output name=env::${{ github.event.inputs.environment }}"
          } elseif ($env:GITHUB_REF -match '^refs/tags/') {
            $TAG = $env:GITHUB_REF
            Write-Output "Tag: $TAG"
            if ($TAG -match '^refs/tags/dev_v*') {
              $ENV = "DEV"
              Write-Output "::set-output name=env::$ENV"
            } elseif ($TAG -match '^refs/tags/uat_v*') {
              $ENV = "UAT"
              Write-Output "Environment: $ENV"
              Write-Output "::set-output name=env::$ENV"
            } elseif ($TAG -match '^refs/tags/qa_v*') {
              $ENV = "QA"
              Write-Output "::set-output name=env::$ENV"
            }
          }

          Write-Output "ENV: $ENV"
          # for /f "tokens=1" %%i in ('jps -m ^| find "java.exe"') do (
          #   taskkill /F /PID %%i
          # )

       - name: Stop running Java process
         shell: cmd
         run: |
          @echo off
          echo Stopping running Java process...
          jps
          taskkill /f /im java.exe
          echo Java process stopped.

          
       - name: Building
         run: |
          $ENV = "${{ steps.env.outputs.env }}"
          echo "Environment: $ENV"
          if ($ENV -eq "DEV") {
            mvn clean package
            Remove-Item "C:\Dev En\Achieve_API\achieve-0.0.1-SNAPSHOT.war" -Force
            Copy-Item -Path "C:\Users\Administrator\actions-runner\_work\sample-java-app\sample-java-app\target\achieve-0.0.1-SNAPSHOT.war" -Destination "C:\Dev En\Achieve_API"  -Force
           }
          elseif ($ENV -eq "QA") {
           mvn clean package
            Remove-Item "C:\Dev Environment\Achieve_API\achieve-0.0.1-SNAPSHOT.war" -Force
            Copy-Item -Path "C:\Users\Administrator\actions-runner\_work\sample-java-app\sample-java-app\target\achieve-0.0.1-SNAPSHOT.war" -Destination "C:\Dev Environment\Achieve_API"  -Force
           }
           elseif ($ENV -eq "UAT") {
           mvn clean package
            Remove-Item "C:\Dev Environment\Achieve_API\achieve-0.0.1-SNAPSHOT.war" -Force
            Copy-Item -Path "C:\Users\Administrator\actions-runner\_work\sample-java-app\sample-java-app\target\achieve-0.0.1-SNAPSHOT.war" -Destination "C:\Dev Environment\Achieve_API"  -Force
           }
          

       # @echo off
       #    setlocal enabledelayedexpansion
          
       #    REM Get current date and time in MM/DD/YYYY HH:MM:SS format
       #    for /f "tokens=2 delims==." %%a in ('wmic OS get localdatetime /value') do set "datetime=%%a"
       #    set "date=!datetime:~4,2!/!datetime:~6,2!/!datetime:~0,4!"
       #    set "time=!datetime:~8,2!:!datetime:~10,2!:!datetime:~12,2!"
          
       #    REM Add 1 minute to the current time
       #    for /f "tokens=1-3 delims=:" %%a in ("!time!") do (
       #        set /a "hour=10%%a %% 100"
       #        set /a "minute=10%%b %% 100"
       #        set /a "second=10%%c %% 100"
       #    )
       #    set /a "minute=minute+1"
       #    if !minute! geq 60 (
       #        set /a "hour=hour+1"
       #        set /a "minute=minute-60"
       #    )
       #    if !hour! lss 10 set "hour=0!hour!"
       #    if !minute! lss 10 set "minute=0!minute!"
       #    if !second! lss 10 set "second=0!second!"
          
       #    REM Create the scheduled task
       #    SCHTASKS /CREATE /tn MyApp_2 /tr "\"C:\Dev En\Achieve_API\ak.bat\"" /sc once /st !hour!:!minute!:!second! /sd !date! /F
           
           
    
       - name: Stop running Java process
         shell: cmd
         run: |
           sheduler.bat
         
