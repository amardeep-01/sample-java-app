
name: ACHIEVE-Service-CICD

on:
  push:
    branches:
      - '**' 
    tags:   
      - 'dev_v*'  
      - 'uat_v*'    
      - 'qa_v*'  
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Select Environment
        options:
          - DEV
          - QA
          - UAT

jobs:
  build-and-test:
    if: github.event_name != 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/')
    runs-on: [ self-hosted]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build docker
        run: docker build -t image1 .

      - name: Build docker
        run: docker save -o image1.tar image1:latest


      - name: docker swarm run
        run: |
         cd "C:\Users\amardeep.kini\demo"
         docker stack deploy -c demo.yaml demo-app
     


        


        
      
  deploymentjob:
     name: Deployment Job
     if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
     runs-on: [ self-hosted, deploy ]
     steps:
       - name: Checkout Repository
         uses: actions/checkout@v2
        
       - name: Determine Environment
         id: env
         if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
         run: |
          Write-Output "Event Name: $env:GITHUB_EVENT_NAME"
          Write-Output "Ref: $env:GITHUB_REF"
          if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch') {
            Write-Output "::set-output name=env::${{ github.event.inputs.environment }}"
          } elseif ($env:GITHUB_REF -match '^refs/tags/') {
            $TAG = $env:GITHUB_REF
            Write-Output "Tag: $TAG"
            if ($TAG -match '^refs/tags/dev_v*') {
              $ENV = "DEV"
              Write-Output "::set-output name=env::$ENV"
            } elseif ($TAG -match '^refs/tags/uat_v*') {
              $ENV = "UAT"
              Write-Output "Environment: $ENV"
              Write-Output "::set-output name=env::$ENV"
            } elseif ($TAG -match '^refs/tags/qa_v*') {
              $ENV = "QA"
              Write-Output "::set-output name=env::$ENV"
            }
          }

          Write-Output "ENV: $ENV"
         

      

       


          
       - name: Building
         run: |
          $ENV = "${{ steps.env.outputs.env }}"
          echo "Environment: $ENV"
          if ($ENV -eq "DEV") {
          docker build -t image1 .
          docker save -o image1.tar image1:latest
          docker stack deploy -c demo.yaml demo-app

            
           }
          elseif ($ENV -eq "QA") {
           mvn clean package
            Remove-Item "C:\Dev Environment\Achieve_API\achieve-0.0.1-SNAPSHOT.war" -Force
            Copy-Item -Path "C:\Users\Administrator\actions-runner\_work\sample-java-app\sample-java-app\target\achieve-0.0.1-SNAPSHOT.war" -Destination "C:\Dev Environment\Achieve_API"  -Force
           }
           elseif ($ENV -eq "UAT") {
           mvn clean package
            Remove-Item "C:\Dev Environment\Achieve_API\achieve-0.0.1-SNAPSHOT.war" -Force
            Copy-Item -Path "C:\Users\Administrator\actions-runner\_work\sample-java-app\sample-java-app\target\achieve-0.0.1-SNAPSHOT.war" -Destination "C:\Dev Environment\Achieve_API"  -Force
           }
          

      
       - name: Stop running Java process
         shell: cmd
         run: |
           cd C:\Users\Administrator\actions-runner\_work\sample-java-app\sample-java-app
           sheduler.bat
         
